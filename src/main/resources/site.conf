server {
    listen {{external-port}} ssl;
    server_name {{fqdn}};
    ssl_certificate /etc/nginx/ssl/{{fqdn}}.crt;
    ssl_certificate_key /etc/nginx/ssl/{{fqdn}}.key;

    
    {{#tls-3}}
    # TLS 1.3
    ssl_protocols TLSv1.3;
    # there is no need to set it on for TLSv1.3
    ssl_prefer_server_ciphers off;
    {{/tls-3}}

    {{^tls-3}}
    # TLS 1.2
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
    {{/tls-3}}

    # generate with: openssl dhparam -out dhparam.pem 4096
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # hardening
    server_tokens off;
    # allow only ssl
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    # xss protection headers
    add_header X-XSS-Protection "1; mode=block";

    # We use a variable so nginx doesn't resovle DNS only at startup.
    set $upstream_endpoint 127.0.0.1:{{internal-port}};

    {{#basic-auth}}
    auth_basic "Protected";
    auth_basic_user_file /etc/htpasswd/{{fqdn}};
    {{/basic-auth}}

    location ~ {
        proxy_pass http://$upstream_endpoint;
        proxy_http_version 1.1;

        {{#websockets}}
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        {{/websockets}}

    }

}

